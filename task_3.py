"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

db = {
    "SBUX": 150000,
    "AAPL": 1300000,
    "NIKE": 587000,
    "TSLA": 394121,
}

""" квадратичная O(N**2)"""


def three_com(lst_data):
    for i in range(len(lst_data) - 1):
        for j in range(len(lst_data) - i - 1):
            if lst_data[j][1] < lst_data[j + 1][1]:
                lst_data[j], lst_data[j + 1] = lst_data[j + 1], lst_data[j]
    return lst_data[:3]


# lst_data = list(data.items())
# for i in three_com(lst_data):
#     print(f'{i[0]} : {i[1]}')


""" линейная O(N)"""


def three_com_ln(database):
    max_com = {}
    database_dict = dict(database)
    for i in range(3):
        max_income = max(database_dict.items(), key=lambda k_v: k_v[1])
        del database_dict[max_income[0]]
        max_com[max_income[0]] = max_income[1]
    return max_com


print(three_com_ln(db))

"""вторая функция более эфективна, т.к. в первой реализован цикл в цикле"""